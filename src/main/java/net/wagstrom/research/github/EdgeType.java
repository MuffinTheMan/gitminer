package net.wagstrom.research.github;

import com.ibm.research.govsci.graph.StringableEnum;

public enum EdgeType implements StringableEnum {
	COMMITAUTHOR("COMMIT_AUTHOR"),
	COMMITPARENT("COMMIT_PARENT"),
	COMMITTER("COMMITTER"),
	DISCUSSIONCOMMIT("DISCUSSION_COMMIT"),
	DISCUSSIONUSER("DISCUSSION_USER"),
	FOLLOWER("FOLLOWER"),
	FOLLOWING("FOLLOWING"),
	GISTCOMMENT("GIST_COMMENT"),
	GISTCOMMENTOWNER("GIST_COMMENT_OWNER"),
	GISTFILE("GIST_FILE"),
	GISTOWNER("GIST_OWNER"),
	ISSUE("ISSUE"),
	ISSUELABEL("ISSUE_LABEL"),
	ISSUEOWNER("ISSUE_OWNER"),
	ISSUECOMMENT("ISSUE_COMMENT"),
	ISSUECOMMENTOWNER("ISSUE_COMMENT_OWNER"),
	ORGANIZATIONOWNER("ORGANIZATION_OWNER"),
	ORGANIZATIONMEMBER("ORGANIZATION_MEMBER"),
	ORGANIZATIONTEAM("ORGANIZATION_TEAM"),
	PULLREQUEST("PULLREQUEST"),
	PULLREQUESTDISCUSSION("PULLREQUEST_DISCUSSION"),
	PULLREQUESTLABEL("PULLREQUEST_LABEL"),
	PULLREQUESTOWNER("PULLREQUEST_OWNER"),
	PULLREQUESTISSUEUSER("PULLREQUEST_ISSUE_USER"),
	PULLREQUESTISSUECOMMENT("PULLREQUEST_ISSUE_COMMENT"),
	PULLREQUESTCOMMIT("PULLREQUEST_COMMIT"),
	PULLREQUESTREVIEWCOMMENT("PULLREQUEST_REVIEW_COMMENT"),
	PULLREQUESTCOMMENTOWNER("PULLREQUEST_COMMENT_OWNER"),
	REPOWATCHED("REPO_WATCHED"),
	REPOOWNER("REPO_OWNER"),
	REPOCOLLABORATOR("REPO_COLLABORATOR"),
	REPOCONTRIBUTOR("REPO_CONTRIBUTOR"),
	REPOFORK("REPO_FORK"),
	TEAMMEMBER("TEAM_MEMBER");
	
	private String text;
	
	EdgeType(String text) {
		this.text = text;
	}
	
	public String toString() {
		return this.text;
	}
	
	public static EdgeType fromString(String text) {
		if (text != null) {
			for (EdgeType d : EdgeType.values()) {
				if (text.equals(d.text)) { return d; }
			}
		}
		throw new IllegalArgumentException("EdgeType: '" + text + "' not valid");
	}
}
