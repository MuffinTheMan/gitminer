/**
 * produce information about roles in the community by mining the graph
 * database
 */
import net.wagstrom.research.github.IndexNames
import net.wagstrom.research.github.IdCols
import net.wagstrom.research.github.EdgeType
import net.wagstrom.research.github.VertexType

g = new Neo4jGraph(Defaults.DBPATH)
projects = ["tinkerpop/gremlin"]

for (project in projects) {
    repo = g.idx(IndexNames.REPOSITORY).get(IdCols.REPOSITORY, project).next()
    println "\n\n******************************************"
    println repo.name

    watchers = repo.in(EdgeType.REPOWATCHED).toList()
    // collaborators: have admin rights on projects
    collaborators = repo.out(EdgeType.REPOCOLLABORATOR).toList()
    // contributors: have committd code to project
    contributors = repo.out(EdgeType.REPOCONTRIBUTOR).toList() + \
                   repo.in(EdgeType.REPOOWNER).dedup().toList()
    issueOwners = repo.out(EdgeType.ISSUE). \
                       in(EdgeType.ISSUEOWNER). \
                       dedup().toList()
    issueCommenters = repo.out(EdgeType.ISSUE). \
                           out(EdgeType.ISSUECOMMENT). \
                           in(EdgeType.ISSUECOMMENTOWNER).dedup().toList()
    pullRequestOwners = repo.out(EdgeType.PULLREQUEST). \
                             in(EdgeType.PULLREQUESTOWNER).dedup().toList()
    openPullRequestOwners = repo.out(EdgeType.PULLREQUEST). \
                                 filter{it.closedAt==null}.in(EdgeType.PULLREQUESTOWNER).dedup().toList()
    closedPullRequestOwners = repo.out(EdgeType.PULLREQUEST). \
                                   filter{it.closedAt!=null}.in(EdgeType.PULLREQUESTOWNER).dedup().toList()
    mergedPullRequestOwners = repo.out(EdgeType.PULLREQUEST). \
                                   filter{it.merged_at != null}.in(EdgeType.PULLREQUESTOWNER).dedup().toList()
    pullRequestCommenters = repo.out(EdgeType.PULLREQUEST). \
                                 out(EdgeType.PULLREQUESTDISCUSSION). \
                                 filter{it.type==VertexType.USER.toString()}.dedup().toList()
    mergers = repo.out(EdgeType.ISSUE). \
                   out(EdgeType.ISSUEEVENT). \
                   filter{it.event=="merged"}.in(EdgeType.ISSUEEVENTACTOR).dedup()
    forkOwners = repo.out(EdgeType.REPOFORK). \
                      in(EdgeType.REPOOWNER).dedup().toList()

    // FIXME: this should be converted to constants
    committers = repo.in("REPOSITORY").out("AUTHOR").filter{it.type=="GIT_USER"}.out("EMAIL").dedup().in("EMAIL").filter{it.type=="USER"}
     
    allActive = (collaborators + contributors + issueOwners +
                issueCommenters + pullRequestOwners +
                openPullRequestOwners + closedPullRequestOwners +
                pullRequestCommenters).unique()
    allUsers = (allActive as Set) + watchers
    allRounders = (collaborators as Set) + contributors

    /*
     * Lurkers - only watching the repo, no forks, issues, etc
     */
    println "Lurkers"
    println Helpers.setDifferenceLeft(watchers, allActive).login.sort{a,b -> a <=> b}
    /*
     * Independent - forked the repo, but no pull requests
     */
    println "Independent"
    println Helpers.setDifferenceLeft(forkOwners, pullRequestOwners).login.sort{a,b -> a <=> b}
    /*
     * Wannabes - created a pull request, but never accepted
     */
    println "Wannabes"
    println Helpers.setDifferenceLeft(openPullRequestOwners, closedPullRequestOwners).login.sort{a,b -> a <=> b}

    /*
     * External Contributors - created a pull request, pull request
     * has been merged. No direct access.
     */
    println "External Contributors"
    println Helpers.setDifferenceLeft(closedPullRequestOwners, collaborators).login.sort{a,b -> a <=> b}

    /*
     * All Rounder - have direct access to push to the main repo
     */
    println "All Rounders"
    println allRounders.login.sort{a,b -> a <=> b}

    /*
     * FIXME: what about people the role of issues? Is that orthogonal
     * to these roles?
     */
}

g.shutdown()
