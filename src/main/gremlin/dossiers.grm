import net.wagstrom.research.github.IndexNames
import net.wagstrom.research.github.IdCols
import net.wagstrom.research.github.EdgeType
import net.wagstrom.research.github.VertexType
import net.wagstrom.research.github.PropertyName

// util
def merge(Map a, Map b) {
    //return (a + b).groupBy { it.id }.collect { it.value.collectEntries { it } }
    // ghetto merge!
    c = [:]
    c.putAll(a)
    c.putAll(b)
    return c
}

// this was yanked from roles, need to figure out how to import or promote to helpers
def getAllGitAccounts(IndexableGraph g, Vertex user) {
    // getting all of a users git accounts is tricky because they don't make all of their email addresses
    // public. Luckily, using these two methods we do a pretty good job of getting all of a users git_user
    // accounts
    gitAccounts = user.out(EdgeType.EMAIL). \
                       in(EdgeType.EMAIL). \
                       has("type", VertexType.GIT_USER). \
                       dedup().toSet()

    // this code has been superseded as it isn't always that accurate and can
    // grab accounts that don't belong to this user
    // gitAccounts = (gitAccounts as Set) + user.out(EdgeType.ISSUEEVENTACTOR). \
    //                  in(EdgeType.ISSUEEVENT).in(EdgeType.ISSUE). \
    //                  filter{it == repo}.back(3).out(EdgeType.EVENTCOMMIT). \
    //                  out(EdgeType.COMMITTER).dedup().toList()
    
    // here we need to be a little careful with finding additional accounts
    // this pipe takes all of the commits this person has tied to an issue,
    // and filters for those email addresses which are not associated with
    // a user yet. It assumes, and this is a big assumption, that if one of
    // these unparented links shows up in both COMMITTERS and PARENTS then
    // the user probably owns that account
    // traceAccountsCommitter = user.out(EdgeType.ISSUEEVENTACTOR).out(EdgeType.EVENTCOMMIT).out(EdgeType.COMMITTER). \
    //                          filter{it.type=="GIT_USER"}.out("EMAIL").dedup().filter{it.in("EMAIL").filter{it.type == "USER"}.count() == 0}.back(4).toList()
    // traceAccountsAuthor = user.out(EdgeType.ISSUEEVENTACTOR).out(EdgeType.EVENTCOMMIT).out(EdgeType.COMMITAUTHOR). \
    //                          filter{it.type=="GIT_USER"}.out("EMAIL").dedup().filter{it.in("EMAIL").filter{it.type == "USER"}.count() == 0}.back(4).toList()
    // traceAccounts = (traceAccountsCommitter as Set) + traceAccountsAuthor
    // a slightly more complicated but more accurate version of the above commands
    // this version requires that the supposedly unattached commit have the same author
    // and committer.                            
    traceAccounts = user.out(EdgeType.ISSUEEVENTACTOR).out(EdgeType.EVENTCOMMIT). \
         filter{it.out(EdgeType.COMMITTER).filter{it.type==VertexType.GIT_USER}.out(EdgeType.EMAIL).next() == \
                it.out(EdgeType.COMMITAUTHOR).filter{it.type==VertexType.GIT_USER}.out(EdgeType.EMAIL).next()}. \
         out(EdgeType.COMMITTER). \
         filter{it.type==VertexType.GIT_USER}.out(EdgeType.EMAIL).dedup().filter{it.in(EdgeType.EMAIL).filter{it.type == VertexType.USER}.count() == 0}. \
         back(4).dedup().toSet()
    
    gravatars = user.out(EdgeType.GRAVATAR). \
                     in(EdgeType.GRAVATARHASH). \
                     has(PropertyName.TYPE, VertexType.EMAIL). \
                     in(VertexType.EMAIL). \
                     has(PropertyName.TYPE, VertexType.GIT_USER).toSet()
            
    gitAccounts = gitAccounts + traceAccounts + gravatars
     
    allGitAccounts = [] as Set
    for (email in gitAccounts._().out(EdgeType.EMAIL).email.dedup().toSet()) {
        allGitAccounts += g.idx(IndexNames.EMAIL).get(IdCols.EMAIL, email)._().in(EdgeType.EMAIL).has("type", VertexType.GIT_USER).toSet()
    }

    return allGitAccounts
}

def belongsToRepo(Vertex repo, Element e) {
    switch (e.label) {
        case null:
            // kill null first as this is likely a vertex
            break
        case EdgeType.DISCUSSIONUSER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.ISSUEASSIGNEE:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.ISSUECOMMENTOWNER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.ISSUEEVENTACTOR:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.ISSUEOWNER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.PULLREQUESTCOMMENTOWNER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.PULLREQUESTISSUEUSER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.PULLREQUESTOWNER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.PULLREQUESTREVIEWCOMMENTOWNER:
            return belongsToRepo(repo, e.inV.next())
        case EdgeType.COMMITAUTHOR:
            return belongsToRepo(repo, e.outV.next())
        case EdgeType.COMMITTER:
            return belongsToRepo(repo, e.outV.next())
    }
    switch (e.type) {
        case null:
            // kill null first as this is likely an edge
            break
        // discussion_user
        case VertexType.COMMENT:
            // comment -> issue -> repository
            return e.in(EdgeType.ISSUECOMMENT).in(EdgeType.ISSUE).next() == repo
        case VertexType.COMMIT:
            // commit -> repository
            return e.out(EdgeType.REPOSITORY).next() == repo
        case VertexType.PULLREQUESTREVIEWCOMMENT:
            // really not sure how to handle this...
            return false
        // issue_comment_owner
        // - comment
        // issue_event_actor
        case VertexType.ISSUE_EVENT:
            // issue event -> issue -> repository
            return e.in("ISSUE_EVENT").in("ISSUE").next() == repo
        case VertexType.ISSUE:
            // issue -> repository
            return e.in("ISSUE").next() == repo
        case VertexType.PULLREQUEST:
            // pullrequest -> repository
            return e.in("PULLREQUEST").next() == repo
        // issue_event
        // - issue_event
        // git_user
        // - commit
    }
}
def getDossier(IndexableGraph g, Vertex repo, Vertex user) {
    // need to find a groovy equivalent of apply to clean this up
    gh_dossier = user.bothE(EdgeType.DISCUSSIONUSER, \
                            EdgeType.ISSUEASSIGNEE, \
                            EdgeType.ISSUECOMMENTOWNER, \
                            EdgeType.ISSUEEVENTACTOR, \
                            EdgeType.ISSUEOWNER, \
                            EdgeType.PULLREQUESTCOMMENTOWNER, \
                            EdgeType.PULLREQUESTISSUEUSER, \
                            EdgeType.PULLREQUESTOWNER, \
                            EdgeType.PULLREQUESTREVIEWCOMMENTOWNER). \
                      filter{ belongsToRepo(repo, it) }. \
                      groupCount{it.label}.cap.next()
    g_dossier = getAllGitAccounts(g, user). \
                    //_().in(EdgeType.COMMITAUTHOR, \
                           //EdgeType.COMMITTER). \
                    _().inE(EdgeType.COMMITTER). \
                    filter{ belongsToRepo(repo, it) }. \
                    groupCount{it.label}.cap.next()
    return merge(gh_dossier, g_dossier)
}

def getDossierAsCSV(Vertex repo, Vertex user, Map dossier) {
    return [repo.name, \
            user.login, \
            "\"" + user.email + "\"", \
            //user.gravatarId, \
            //dossier[EdgeType.DISCUSSIONUSER] ?: 0, \
            dossier[EdgeType.ISSUEASSIGNEE] ?: 0, \
            dossier[EdgeType.ISSUECOMMENTOWNER] ?: 0, \
            dossier[EdgeType.ISSUEEVENTACTOR] ?: 0, \
            dossier[EdgeType.ISSUEOWNER] ?: 0, \
            dossier[EdgeType.PULLREQUESTCOMMENTOWNER] ?: 0, \
            //dossier[EdgeType.PULLREQUESTISSUEUSER] ?: 0, \
            //dossier[EdgeType.PULLREQUESTOWNER] ?: 0, \
            dossier[EdgeType.PULLREQUESTREVIEWCOMMENTOWNER] ?: 0, \
            dossier[EdgeType.COMMITTER] ?: 0 ].join(",")
}

g = new Neo4jGraph(Defaults.DBPATH)

//projects = Defaults.PROJECTS
//projects = ["rails/rails", "rack/rack", "sinatra/sinatra"]
projects = ["rails/rails"]
//user = repo.in("REPO_OWNER").next()

// header
// TODO clean this up, need to unify all of the points where these fields are referenced
println "repository,username,email,issueassignee,issuecommentowner,issueeventactor,issueowner,pullrequestcommentowner,pullrequestreviewcommentowner,committer"
for (project in projects) {
    repo = g.idx(IndexNames.REPOSITORY).get(IdCols.REPOSITORY, project).next()
    users = Helpers.getAllRepositoryUsers(repo)
    for (user in users) {
        if (user instanceof Vertex) {
            println getDossierAsCSV(repo, user, getDossier(g, repo, user))
        } else {
            println "------invalid"
            println user.class
        }
    }
}

g.shutdown()

